import java.io.RandomAccessFile;
import java.text.DecimalFormat;

import mhframework.MHMapCell;
import mhframework.MHMapFileInfo;
import mhframework.MHTileSetManager;


public class IMEFileData
{

    public MHMapFileInfo info;
    public int[][][] fileData;


    /** Creates an IMEFileData object from existing map files. */
    public IMEFileData(MHMapFileInfo fileInfo)
    {
        info = fileInfo;

        fileData = new int[MHMapCell.NUM_LAYERS][][];

        for (int layer = 0;
             layer < MHMapCell.NUM_LAYERS;
             layer++)
        {
            fileData[layer] = new int[info.width][info.height];
        }

        this.loadMapFile(info.fileName);

    }


    /**
     * Creates a new IMEFileData object and the associated files
     * with the given dimensions on each layer.
     */
    public IMEFileData(int width, int height, int mapNumber, int tileSetID, MHMapFileInfo fileInfo)
    {
        DecimalFormat formatter = new DecimalFormat("0000000");
        String mapNum = formatter.format(mapNumber);

        info = fileInfo;

        info.width = width;
        info.height = height;
        info.tileSetId = tileSetID;
        info.fileName    = "M" + mapNum + ".map";
        info.floorFile   = "F" + mapNum + ".dat";
        info.itemFile    = "I" + mapNum + ".dat";
        info.wallFile    = "W" + mapNum + ".dat";
        info.ceilingFile = "C" + mapNum + ".dat";

        fileData = new int[MHMapCell.NUM_LAYERS][][];

        for (int layer = 0;
             layer < MHMapCell.NUM_LAYERS;
             layer++)
        {
            fileData[layer] = new int[width][height];
        }

        initialize();

        saveMapFile();

    }


    /** Saves to files according to specification in MHMapFileInfo object. */
    public void saveMapFile()
    {
        try
        {
            RandomAccessFile file = new RandomAccessFile(info.fileName, "rw");
            file.writeBytes(info.tileSetId   + "\n");
            file.writeBytes(info.floorFile   + "\n");
            file.writeBytes(info.itemFile    + "\n");
            file.writeBytes(info.wallFile    + "\n");
            file.writeBytes(info.ceilingFile + "\n");
            file.close();

            writeToFile(MHMapCell.FLOOR_LAYER,   info.floorFile);
            writeToFile(MHMapCell.ITEM_LAYER,    info.itemFile);
            writeToFile(MHMapCell.WALL_LAYER,    info.wallFile);
            writeToFile(MHMapCell.CEILING_LAYER, info.ceilingFile);
        }
        catch(Exception e)
        {
            System.err.println("ERROR:  There was a problem saving the data files.");
        }
    }


    private void writeToFile(int layer, String fileName)
    {
        try
        {
            RandomAccessFile file = new RandomAccessFile(fileName, "rw");

            for (int row = 0; row < info.height; row++)
            {
                for (int col = 0; col < info.width; col++)
                {
                    file.writeBytes(new String(fileData[layer][row][col] + "\t"));
                }

                file.writeBytes("\n");
            }

            file.close();
        }
        catch(Exception e)
        {
        }
    }


    private void initialize()
    {
        for (int layer = 0; layer < MHMapCell.NUM_LAYERS; layer++)
            for (int row = 0; row < fileData[layer].length; row++)
                for (int col = 0; col < fileData[layer][row].length; col++)
                {
                    if (layer == MHMapCell.FLOOR_LAYER)
                        fileData[layer][row][col] = 0;
                    else
                        fileData[layer][row][col] = MHTileSetManager.NULL_TILE_ID;
                }
    }



    public void loadMapFile(String filename)
    {
        fileData = new int[MHMapCell.NUM_LAYERS][info.width][info.height];
        initialize();

        for (int layer = 0;
             layer < MHMapCell.NUM_LAYERS;
             layer++)
        {
            int row = 0, col = 0;

            String layerFile = chooseLayerFile(layer);

                try
                {
                    RandomAccessFile file =
                                    new RandomAccessFile(layerFile, "r");

                    for (row = 0; row < info.height; row++)
                    {
                        String line = file.readLine().trim();
                        String[] dataRow = line.split("\t");
                        for (col = 0; col < dataRow.length; col++)
                        {
                            int tileID = MHTileSetManager.NULL_TILE_ID;

                            try
                            {
                                tileID = Integer.parseInt(dataRow[col]);
                            }
                            catch (NumberFormatException nfe)
                            {
                                tileID = MHTileSetManager.NULL_TILE_ID;
                            }

                            fileData[layer][row][col] = tileID;
                        } // for (col...
                    } // for (row...
                } // try
                catch (Exception e)
                {
                    try
                    {
                        fileData[layer][row][col] = MHTileSetManager.NULL_TILE_ID;
                    }
                    catch (Exception ex) { }
                }
        } // for (layer...)
    } // loadMapFile


        /****************************************************************
         * Choose the correct data file for the layer we're building.
         */
        private String chooseLayerFile(int layer)
        {
                String layerFile = null;

                switch (layer)
                {
                        case MHMapCell.FLOOR_LAYER:
                                layerFile = info.floorFile;
                                break;
                        case MHMapCell.WALL_LAYER:
                                layerFile = info.wallFile;
                                break;
                        case MHMapCell.ITEM_LAYER:
                                layerFile = info.itemFile;
                                break;
                        case MHMapCell.CEILING_LAYER:
                                layerFile = info.ceilingFile;
                                break;
                }

                return layerFile;
        }


    public void setMapFileInfo(mhframework.MHMapFileInfo fileInfo)
    {
        info = fileInfo;
    }

    public mhframework.MHMapFileInfo getMapFileInfo()
    {
        return info;
    }


}

